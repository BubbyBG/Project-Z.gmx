<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>character_mechanics_biped</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>team = 1;
gun_current = 1;
target = noone;

ai_state = 0; //0 = AI_IDLE, 1 = AI_PATROL, 2 = AI_SEARCH, 3 = AI_CHASE, 4 = AI_POSITIONED, 5 = AI_STUNNED
ai_state_sight = 0;
ai_state_inrange = 0;
ai_state_walking = 0;
ai_state_backstep = 0;
ai_state_seek_height = 0;
ai_seek_level = 0; //1 = target is higher than ai; -1 = target is lower than ai

ai_flag_uses_patrol = 0;
ai_flag_uses_melee = 0;
ai_flag_prefers_range = 0; //if == 1, backsteps or switches to melee when too close
ai_flag_always_aware = 0;

ai_range_min = 32;
ai_range_max = 128;
ai_range_sight = 64;
ai_range_hear = 128;
ai_range_alert_others = 128;

dist_x = 9999;
dist_2d = 9999;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GENERAL STEP
if target == noone
{
    if (instance_exists(obj_player) == 1)
        target = instance_nearest(x,y,obj_player);
}

if target != noone
{
    ai_state_sight = !collision_line(x, y, target.x, target.y, any_solid, 1, 1);
    
    if (distance_to_object(target) &lt; ai_range_sight)
    {
        ai_state_inrange = 1;
    }
    else
    {
        ai_state_inrange = 0;
    }
}

//STATE DETERMINATION
if (ai_state &lt; 2) //Things that get the character alerted
{
    //CASE 1: Seeing the player
    if ai_state_sight == 1 and ai_state_inrange == 1
    {
        ai_state = AI_CHASE;
    }
    //CASE 2: Hearing/seeing bullets
    if instance_exists(any_projectile)
    {
        var _nearest = instance_nearest(x,y,any_projectile);
        if distance_to_object(_nearest) &lt; ai_range_hear
        {
            ai_state = AI_CHASE;
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///STATE EXECUTION
if target != noone
{
    dist_x = (target.x - x);
    dist_2d = distance_to_object(target);
    
    if (ai_state == AI_CHASE or ai_state == AI_SEARCH)
    {
        if (abs(target.y - y) &gt; 32) and (ai_state_sight == 0 or ai_state_inrange == 0)
        {
            ai_seek_level = 1;
        }
        if (abs(target.y - y) &lt;= 32) or (ai_state_sight == 1 or ai_state_inrange == 1)
        {
            ai_seek_level = -1;
        }
    }
    
    if (ai_state == AI_SEARCH)
    {
        if ai_state_sight == 0
        {
            input_h = sign(dist_x);
            if ai_seek_level == 1 and place_meeting(x, y, ai_node_up)
            {
                input_jump = 1;
            }
        }
        else
        {
            ai_state = AI_CHASE;
        }
    }
    
    if (ai_state == AI_CHASE)
    {
        if ai_state_sight == 1 and dist_2d &gt; ai_range_min
       {
            input_h = sign(dist_x);
            if ai_seek_level == 1 and place_meeting(x, y, ai_node_up)
            {
                input_jump = 1;
            }
        }
        else if ai_state_sight == 0 or dist_2d &gt; ai_range_min
        {
            ai_state = AI_SEARCH;
        }
        else if ai_state_sight == 1 and dist_2d &lt;= ai_range_min
        {
            ai_state = AI_POSITIONED;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>draw_set_font(font_main);
draw_text(0,128,"State: " + string(ai_state));
draw_text(0,128+16*1,"dist_x: " + string(dist_x));
draw_text(0,128+16*2,"ai_state_sight: " + string(ai_state_sight));
draw_text(0,128+16*3,"ai_state_inrange: " + string(ai_state_inrange));
draw_text(0,128+16*4,"ai_seek_level: " + string(ai_seek_level));
draw_text(0,128+16*5,"input_h: " + string(input_h));
draw_text(0,128+16*6,"input_jump: " + string(input_jump));

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
