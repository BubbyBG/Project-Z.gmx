<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_player_stand</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>1</depth>
  <persistent>-1</persistent>
  <parentName>character_mechanics_biped</parentName>
  <maskName>spr_player_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Player Configuration
instance_create(x,y,obj_inventory)
pickup_range = 32;
pickup_select_pos = 0;
list_pickups = -1;
gun_slot_active = 0;
team = 1
global.equip_slot[1] = ds_grid_get(global.inventory_item,0,0);
global.equip_slot[2] = ds_grid_get(global.inventory_item,1,0);
global.equip_slot[3] = ds_grid_get(global.inventory_item,2,0);
global.equip_slot[4] = ds_grid_get(global.inventory_item,3,0);
global.equip_slot[5] = ds_grid_get(global.inventory_item,4,0);
gun_current = global.equip_slot[gun_slot_active];






</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get inputs from keyboard
if keyboard_check(ord('A'))
    input_left = 1;
    else
    input_left = 0;
if keyboard_check(ord('D'))
    input_right = 1;
    else
    input_right = 0;
if keyboard_check(ord('W'))
    input_up = 1;
    else
    input_up = 0;
if keyboard_check(ord('S'))
    input_down = 1;
    else
    input_down = 0;
if keyboard_check(vk_space)
    input_jump = 1;
    else
    input_jump = 0;
if keyboard_check(vk_lshift)
    input_shift = 1;
    else
    input_shift = 0;
if mouse_check_button(mb_left)
    input_leftmouse = 1;
    else
    input_leftmouse = 0;
if mouse_check_button(mb_right)
    input_rightmouse = 1;
    else
    input_rightmouse = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Climbing Movement
if state = 4
{
    state_armed = 0
    if keyboard_check(input_left) == 1 and place_free(x-stat_climb_speed,y) {x -= stat_climb_speed; clamber = 1;}
    if keyboard_check(input_right) == 1 and place_free(x+stat_climb_speed,y) {x += stat_climb_speed; clamber = 1;}
    if keyboard_check(input_up) == 1 and place_free(x,y-stat_climb_speed) {y -= stat_climb_speed; clamber = 1;}
    if keyboard_check(input_down) == 1 and place_free(x,y+stat_climb_speed) {y += stat_climb_speed; clamber = 1;}
    if keyboard_check(input_down) == 0 and keyboard_check(input_up) == 0 and keyboard_check(input_left) == 0 and keyboard_check(input_right) == 0 {clamber = 0;}
    if instance_exists(any_ladder) {if !place_meeting(x,y,obj_ladder) and place_free(x,y+1) {clamber = 0; gravity = 0.2; state = 2; armed = 1}}
    if instance_exists(any_ladder) {if !place_meeting(x,y,obj_ladder) and !place_free(x,y+1) {clamber = 0; gravity = 0; state = 1; armed = 1}}
    if !keyboard_check(input_shift) and !place_free(x,y+1) {state = 1; armed = 1}
    if !keyboard_check(input_shift) and place_free(x,y+1) {state = 2; armed = 1}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Loot Menu

//----------------------- LOOT MENU --------------------------\\  
if instance_number(any_item) &gt; 0
{
    //-------------------------- Create List ---------------------------\\
    if !ds_exists(list_pickups, ds_type_list)
    {
        list_pickups = ds_list_create();
    }
    
    //-------------------------- Pickup Selector ---------------------------\\
    if pickup_select_pos &gt;= ds_list_size(list_pickups)
    {
        pickup_select_pos = ds_list_size(list_pickups) - 1
    }
    else
    {
        if mouse_wheel_down() and pickup_select_pos &lt; ds_list_size(list_pickups) - 1
            pickup_select_pos += 1;
        if mouse_wheel_up() and pickup_select_pos &gt; 0
            pickup_select_pos -= 1;
    }
    if ds_list_size(list_pickups) == 0
    {
        pickup_select_pos = -1;
    }
   
    if pickup_select_pos == -1 and ds_list_size(list_pickups) &gt; 0
    {
        pickup_select_pos = 0
    }
    
    //-------------------------- Data Structure ---------------------------\\
    var _num = instance_number(any_item);
    for (var _nth = 0; _nth &lt; _num; _nth++)
    {
        var _foundItem;
        _foundItem = instance_find(any_item, _nth);
    
        if distance_to_object( _foundItem ) &lt;= pickup_range
        {   
            if (scr_list_find_value(list_pickups, _foundItem) == -1)
                ds_list_add(list_pickups, _foundItem);
        }
        
        if distance_to_object( _foundItem ) &gt; pickup_range
        {
            _position = scr_list_find_value(list_pickups, _foundItem) //return position or -1
            if ( _position != -1 )
            {
                ds_list_delete(list_pickups, _position);
            }
        }
    }
    
    //-------------------------- Interactions ---------------------------\\
    if keyboard_check_pressed(ord('F')) and pickup_select_pos != -1
    {
        scr_inventory_place(global.inventory_item,ds_list_find_value(list_pickups, pickup_select_pos).item_id);
        instance_destroy(ds_list_find_value(list_pickups, pickup_select_pos));
        ds_list_delete(list_pickups, pickup_select_pos);
        global.equip_slot[1] = ds_grid_get(global.inventory_item,0,0);
        global.equip_slot[2] = ds_grid_get(global.inventory_item,1,0);
        global.equip_slot[3] = ds_grid_get(global.inventory_item,2,0);
        global.equip_slot[4] = ds_grid_get(global.inventory_item,3,0);
        global.equip_slot[5] = ds_grid_get(global.inventory_item,4,0);
    }
}

//---------------------------- Cleanup ----------------------------\\
if ds_exists(list_pickups, ds_type_list)
{
    if ds_list_empty(list_pickups) == 1 or instance_number(any_item) == 0
        ds_list_destroy(list_pickups);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Weapon Changing

if keyboard_check_pressed(ord("1")) and state_can_shoot == 1 {gun_slot_active = 1; gun_current = global.equip_slot[gun_slot_active];}
if keyboard_check_pressed(ord("2")) and state_can_shoot == 1 {gun_slot_active = 2; gun_current = global.equip_slot[gun_slot_active];}
if keyboard_check_pressed(ord("3")) and state_can_shoot == 1 {gun_slot_active = 3; gun_current = global.equip_slot[gun_slot_active];}
if keyboard_check_pressed(ord("4")) and state_can_shoot == 1 {gun_slot_active = 4; gun_current = global.equip_slot[gun_slot_active];}
if keyboard_check_pressed(ord("5")) and state_can_shoot == 1 {gun_slot_active = 5; gun_current = global.equip_slot[gun_slot_active];}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Debug
if keyboard_check_pressed(ord('Z'))
{
    zazaX += (-1)^keyboard_check(vk_lshift)
}
if keyboard_check_pressed(ord('X'))
{
    zazaY += (-1)^keyboard_check(vk_lshift)
}



if keyboard_check_pressed(ord('Y')) and (keyboard_check_direct(vk_shift) == 0)
    global.player_trait_strength += 1;
if keyboard_check_pressed(ord('U')) and (keyboard_check_direct(vk_shift) == 0)
    global.player_trait_speed += 1;
if keyboard_check_pressed(ord('I')) and (keyboard_check_direct(vk_shift) == 0)
    global.player_trait_endurance += 1;
if keyboard_check_pressed(ord('O')) and (keyboard_check_direct(vk_shift) == 0)
    global.player_trait_reflexes += 1;
if keyboard_check_pressed(ord('P')) and (keyboard_check_direct(vk_shift) == 0)
    global.player_trait_knowledge += 1;
    
if keyboard_check_pressed(ord('Y')) and keyboard_check_direct(vk_shift)
    global.player_trait_strength -= 1;
if keyboard_check_pressed(ord('U')) and keyboard_check_direct(vk_shift)
    global.player_trait_speed -= 1;
if keyboard_check_pressed(ord('I')) and keyboard_check_direct(vk_shift)
    global.player_trait_endurance -= 1;
if keyboard_check_pressed(ord('O')) and keyboard_check_direct(vk_shift)
    global.player_trait_reflexes -= 1;
if keyboard_check_pressed(ord('P')) and keyboard_check_direct(vk_shift)
    global.player_trait_knowledge -= 1;

scr_traits_adjust();

stat_maxhealth = global.player_health_max
stat_damage_redux_fire = global.player_damage_redux_fire
stat_damage_redux_ice = global.player_damage_redux_ice
stat_damage_redux_electric = global.player_damage_redux_electric
stat_damage_redux_impact = global.player_damage_redux_impact
stat_jump_force = global.player_jump_force
stat_jump_duration = global.player_jump_duration

stat_acceleration_ground = global.player_acceleration_ground
stat_acceleration_air = global.player_acceleration_air
stat_speed_max = global.player_speed_max
stat_speed_min = global.player_speed_min
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Other
if instance_exists(obj_station_health)
{
    var nearest = instance_nearest(x,y,obj_station_health);
    if distance_to_object(nearest) &lt; 4
    {
        stat_health = min(global.player_health_max,stat_health+1);
    }
    
}

if stat_health &lt; 1 
{
    show_debug_message("You have lost. Game Restarting");
    game_restart();    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_exists(list_pickups, ds_type_list)
{
    ds_list_destroy(list_pickups)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if ds_exists(list_pickups, ds_type_list)
{
    draw_set_font(font_main);
    draw_set_color(c_black)
    draw_text(720,288,"Press E to pick up:");
    draw_set_color(c_white);
    draw_text(724,292,"Press E to pick up:");
    var h2 = ds_list_size(list_pickups);
    if h2 &gt; 0
    {
        for (var i2 = 0; i2 &lt; h2; i2++)
        {
            var pickupID = ds_list_find_value(list_pickups,i2);
            draw_set_color(c_black)
            draw_text(720,320+i2*32,string(global.item_name[pickupID.item_id]));
            if pickup_select_pos != i2
                {draw_set_color(c_white);}
            if pickup_select_pos == i2
                {draw_set_color(c_yellow);}
            draw_text(724,324+i2*32,string(global.item_name[pickupID.item_id]));
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>321</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_message</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>2</kind>
            <string>The game will be restarted</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>331</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_restart_game</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
