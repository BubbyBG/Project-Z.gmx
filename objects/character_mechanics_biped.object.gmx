<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>any_character</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default Configuration
clock = 0
input_left = 0
input_right = 0
input_up = 0
input_down = 0
input_jump = 0
input_shift = 0
input_leftmouse = 0
input_rightmouse = 0
input_h = 0
image_speed = 0.75
gravity_direction = 270
rotate_intensity = 30
hspeed_current = 0
hspeed_remainder = 0
vspeed_current = 0
vspeed_remainder = 0
vspeed_gravity = 0
constant_gravity = 0.3
xscale = 1
yscale = 1
gun_angle = 0
super_xoffset = 0
gun_current = 0
var_adjustedAngle = 0
gravity_current = 0
gravity_value = 0.1
xPrevious = x
xStored = x
yPrevious = y
dec = 0
team = 0
zazaX = 0;
zazaY = 0;
barrelx = 0;
barrely = 0;
error = 0;

//STATES
state = 0
state_active = 1
state_can_shoot = 1
state_can_boost = 1
state_can_special = 1
state_sprinting = 0
state_stunned = 0
state_boosting = 0
state_launched = 0
state_hit = 0
flag_can_missle = 1;
clamber = 0
moved = 0
rotating = 0
rotate_lock = 0
grabbing = 0
state_armed = 1
bursts_remaining = 0;

//Unused
state_walking = 0
state_airborne = 0

//SHORT VARIABLES
stat_maxhealth = global.player_health_max
stat_health = global.player_health_max
stat_maxstamina = global.player_stamina_base
stat_stamina = global.player_stamina_base
stat_damage_redux_fire = global.player_damage_redux_fire
stat_damage_redux_ice = global.player_damage_redux_ice
stat_damage_redux_electric = global.player_damage_redux_electric
stat_damage_redux_impact = global.player_damage_redux_impact
stat_jump_force = global.player_jump_force
stat_jump_duration = global.player_jump_duration
jump_inertia = global.player_jump_duration

stat_acceleration_ground = global.player_acceleration_ground
stat_acceleration_air = global.player_acceleration_air
stat_deacceleration_ground = 0.8
stat_speed_max = global.player_speed_max
stat_speed_min = global.player_speed_min
stat_climb_speed = 1
stat_meleeBuildupTime = 20
stat_meleeSwingPause = 20
stat_meleeBend = 15
var_footStepPlay = 1
var_meleeSwingBend = 0
var_meleeBendDerivative = 0
var_recoil_current = 0;

move_contact_solid(270,16)


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Default Animations
animation_upper_current = spr_player_upper_stand
animation_lower_current = spr_player_lower_stand
animation_singleBody = 0

//Begin
animation_upper_default = spr_player_upper_stand
animation_lower_stand = spr_player_lower_stand
animation_lower_walk = spr_player_lower_walk
animation_lower_walk_backwards = spr_player_lower_walkBack
animation_lower_rise = spr_player_lower_rise
animation_lower_float = spr_player_lower_rise
animation_lower_fall = spr_player_lower_rise
animation_scoot = spr_player_lower_scoot
animation_stun = spr_player_lower_rise

//Misc
stat_bendLimitDown = 50 //Degrees down from origin
stat_bendLimitUp = 15 //Degrees up from origin
weapon_image_index = 0 //For Melee Animations

//Without separation
animation_wallslide = spr_player_wallslide
animation_climb = spr_player_climb
animation_rotate = spr_player_spin

//Not yet implemented
animation_run = spr_player
animation_blowback = spr_player
animation_boost = spr_player
animation_grab1 = spr_player_ledgegrab

animation_angle = 0 //Used for spinning, not joint rotation

//Superpositions for walking. zero step delay
super_yoffset[0] = 0
super_yoffset[1] = -1
super_yoffset[2] = -1
super_yoffset[3] = -1
super_yoffset[4] = -1
super_yoffset[5] = 0
super_yoffset[6] = -1
super_yoffset[7] = -1
super_yoffset[8] = 0
super_yoffset[9] = 0
super_yoffset[10] = 0


animation_angle1_adjust[0] = 45+var_adjustedAngle-180
animation_angle2_adjust[0] = 45+var_adjustedAngle-180+var_meleeSwingBend
animation_angle3_adjust[0] = var_adjustedAngle-180+var_meleeSwingBend
animation_angle1_adjust[1] = 0
animation_angle2_adjust[1] = 0
animation_angle3_adjust[1] = 0
animation_angle1_adjust[2] = 135+var_adjustedAngle
animation_angle2_adjust[2] = 135+var_adjustedAngle-var_meleeSwingBend
animation_angle3_adjust[2] = var_adjustedAngle-var_meleeSwingBend


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>flag_can_missle = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Burst fire
event_user(0);//Fire


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stun Timer
state_stunned = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="6">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit Timer
state_hit = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="5">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///End Rotation
if rotating = 1 {rotating = 0; rotate_lock = 0; animation_angle = 0}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Previous x
xPrevious = xStored;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Footstep Sounds
var_footStepPlay = 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Melee Full Swing
//var barrelx,barrely,error;
        if xscale == 1 {ang = 135+var_adjustedAngle}
        if xscale == -1 {ang = 45+var_adjustedAngle-180}
        barrelx = x+lengthdir_x(7,ang)
        barrely = y+4+lengthdir_y(7,ang)
        newBullet2 = instance_create(barrelx,barrely,global.item_gun_projectile[gun_current])
            newBullet2.direction = gun_angle
            newBullet2.image_yscale = -xscale;
            newBullet2.damage = global.item_gun_projectileDamage[gun_current]
            newBullet2.image_angle = newBullet2.direction;
            newBullet2.team = team;
        stat_stamina -= global.item_gun_projectileDamage[gun_current];
        
weapon_image_index = 3
var_meleeBendDerivative = -1
alarm[0] = stat_meleeSwingPause
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Melee Swing
weapon_image_index = 2
var_meleeBendDerivative = 0
var_meleeSwingBend = 30
alarm[2] = 2
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Melee Raise or Burst Fire
state_can_shoot = 1;
var_meleeBendDerivative = 0;
var_meleeSwingBend = 0;
if (weapon_image_index != 0)
    weapon_image_index = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Joint Rotation
if (gun_angle &gt;= 0 and gun_angle &lt;= 90) or (gun_angle &gt;= 270 and gun_angle &lt; 360) {xscale = 1;}
if (gun_angle &gt; 90 and gun_angle &lt; 270) {xscale = -1;}

if xscale = 1
{
    if gun_angle &gt; stat_bendLimitUp and gun_angle &lt; 180
    {
        var_adjustedAngle = stat_bendLimitUp;
    }
    else if  gun_angle &lt; 360-stat_bendLimitDown and gun_angle &gt; 180
    {
        var_adjustedAngle = 360-stat_bendLimitDown
    }
    else
    {
        var_adjustedAngle = gun_angle;
    }
}
else if xscale = -1
{
    if gun_angle &lt; 180-stat_bendLimitUp and gun_angle &gt; 0
    {
        var_adjustedAngle = 180-stat_bendLimitUp;
    }
    else if gun_angle &gt; 180+stat_bendLimitDown and gun_angle &lt; 359
    {
        var_adjustedAngle = 180+stat_bendLimitDown
    }
    else
    {
        var_adjustedAngle = gun_angle;
    }
}

if var_meleeBendDerivative != 0
    {var_meleeSwingBend += var_meleeBendDerivative;}
animation_angle1_adjust[0] = 45+var_adjustedAngle-180
animation_angle2_adjust[0] = 45+var_adjustedAngle-180+var_meleeSwingBend
animation_angle3_adjust[0] = var_adjustedAngle-180+var_meleeSwingBend
animation_angle1_adjust[1] = 0
animation_angle2_adjust[1] = 0
animation_angle3_adjust[1] = 0
animation_angle1_adjust[2] = 135+var_adjustedAngle
animation_angle2_adjust[2] = 135+var_adjustedAngle-var_meleeSwingBend
animation_angle3_adjust[2] = var_adjustedAngle-var_meleeSwingBend


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation and State
/*
//STATES
state_active = 1
state_can_shoot = 1
state_can_boost = 1
state_can_special = 1
state_sprinting = 0
state_walking = 0
state_stunned = 0
state_boosting = 0
state_launched = 0
state_airborne = 0

IDLING = 0
WALKING = 1
FLYING = 2
STUNNED = 3
CLIMBING = 4
LAUNCHED = 5
GRABBING = 6
HANGING = 7

animation_upper_default = spr_player_stand_upper
animation_lower_stand = spr_player_stand_lower
animation_lower_walk = spr_player_run
animation_lower_walk_backwards = spr_player_run_backwards
animation_lower_rise = spr_player_jump
animation_lower_float = spr_player_jump
animation_lower_fall = spr_player_jump
*/
/*
vspeed = 0
vspeed_gravity = 0.2
constant_gravity = 0.2
vspeed = 0
gravity_current = 0
gravity_max = 0.1
*/
//-----------State Determination-----------\\
if (x == xPrevious) and !place_free(x,y+1) and state_stunned == 0  and state_launched == 0 {state = IDLING}
if (x != xPrevious) and !place_free(x,y+1) and state_stunned == 0  and state_launched == 0 {state = WALKING}
if place_free(x,y+1) and state_stunned == 0  and state_launched == 0 {state = FLYING}
if state_stunned == 1 and state_launched == 0 {state = STUNNED}
if state_stunned == 0 and state_launched == 1 {state = LAUNCHED}
if instance_exists(any_ladder) {if place_meeting(x,y,obj_ladder) and input_shift
    {
    state = CLIMBING; hspeed_current = 0;
    if vspeed_current != 0 {vspeed_current = 0;}}
    }
if state_stunned == 1
    {
    state = STUNNED
    }
//-----------Animations-----------\\
if state == IDLING and sprite_index != animation_lower_stand {animation_lower_current = animation_lower_stand; image_speed = 0.3; animation_singleBody = 0}
if state == WALKING {
    if sign(xscale) == sign(hspeed_current) and animation_lower_current != animation_lower_walk {animation_lower_current = animation_lower_walk; image_speed = 0.3; animation_singleBody = 0}
    if sign(xscale) != sign(hspeed_current) and animation_lower_current != animation_lower_walk_backwards {animation_lower_current = animation_lower_walk_backwards; image_speed = 0.25; animation_singleBody = 0}
    if sign(hspeed_current) = -1 and input_right == 1 and input_left != 1 {animation_lower_current = animation_scoot; animation_singleBody = 0}
    if sign(hspeed_current) = 1 and input_left == 1 and input_right != 1 {animation_lower_current = animation_scoot; animation_singleBody = 0}
    if input_left == 1 and input_right == 1 {animation_lower_current = animation_scoot; animation_singleBody = 0}}
if state == FLYING 
    and rotating = 0
    {
    if vspeed_current &gt;= 0 
        {
        animation_lower_current = animation_lower_fall; 
        animation_singleBody = 0;
        }
    if vspeed_current &lt; 0
        animation_lower_current = animation_lower_rise; animation_singleBody = 0;
    }
if state == FLYING and rotating == 1 and rotate_lock == 0 {rotate_lock = 1; alarm[5] = 360/rotate_intensity; animation_lower_current = animation_rotate; animation_singleBody = 1;}
if state == CLIMBING and animation_lower_current != animation_climb {animation_lower_current = animation_climb; animation_singleBody = 1;}
if state == CLIMBING
    {
    if clamber = 1 {image_speed = 0.2;}
    if clamber = 0 {image_speed = 0;}
    }
if state == STUNNED
    {
    animation_lower_current = animation_stun;
    }
sprite_index = animation_lower_current

//-----------Extras-----------\\



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
/*
stat_jump_force = global.player_jump_force
stat_jump_duration = global.player_jump_duration
jump_inertia = global.player_jump_duration

stat_acceleration_ground = global.player_acceleration_ground
stat_acceleration_air = global.player_acceleration_air
stat_deacceleration_ground = 0.2
stat_speed_max = global.player_speed_max
stat_speed_min = global.player_speed_min
hspeed_current = 0
vspeed_current = 0
vspeed_gravity = 0.2
constant_gravity = 0.2
*/

//--------- Movement Triggers -----------\\
if state != STUNNED
{
    if input_left == 1 and input_right == 0 // Left
        {
        hspeed_current -= (stat_acceleration_ground+(place_free(x,y+1)*stat_acceleration_air));
        if abs(hspeed_current) &lt; stat_speed_min
            hspeed_current = -stat_speed_min;
        if (hspeed_current &gt; 0) and vspeed_gravity == 0
            hspeed_current *= stat_deacceleration_ground;
        if hspeed_current &lt; -stat_speed_max
            hspeed_current = -stat_speed_max;
        }
    
    if input_left == 0 and input_right == 1 // Right
        {
        hspeed_current += (stat_acceleration_ground+(place_free(x,y+1)*stat_acceleration_air));
        if abs(hspeed_current) &lt; stat_speed_min
            hspeed_current = stat_speed_min;
        if (hspeed_current &lt; 0) and vspeed_gravity == 0
            hspeed_current *= stat_deacceleration_ground;
        if hspeed_current &gt; stat_speed_max
            hspeed_current = stat_speed_max;
        }
    if input_left == 0 and input_right == 0 and vspeed_gravity == 0 // Neither
        {
        if abs(hspeed_current) &gt; 0
            hspeed_current *= stat_deacceleration_ground;
        if hspeed_current &lt; stat_speed_min
            hspeed_current = 0;
        }
    
    if input_left == 1 and input_right == 1 // Both
        {
            hspeed_current = 0;
        }
    
    if input_jump and (jump_inertia &gt; 0) // Jump
        {
            jump_inertia -= 1;
            vspeed_current = -stat_jump_force;
        }
    
    if input_jump == 0 and place_free(x,y+1)
        {jump_inertia = 0;}
}

input_h = input_right - input_left;
xStored = x
alarm[4] = 1;
scr_character_move();
















</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Firing Input
if (state_can_shoot == 1 and state_stunned = 0 and gun_current != 0)
{
    if (mouse_check_button_pressed(mb_left) and global.item_gun_action[gun_current] == 1)
    {
        event_user(0);
    }
    else if (mouse_check_button(mb_left) and global.item_gun_action[gun_current] == 0)
    {
        event_user(0);
    }
    else if (mouse_check_button_pressed(mb_left) and global.item_gun_action[gun_current] == 2)
    {
        bursts_remaining = 2;
        event_user(0);
    }
}

if mouse_check_button_pressed(mb_right) and state_can_shoot == 1 and global.missles &gt; 0
{
    global.missles -= 1;
    instance_create(x,y,obj_missle_smart);
    flag_can_missle = 0;
    alarm[9] = 120;
}

if var_recoil_current &lt; 0.02
    {
        var_recoil_current = 0;
    }
else
    {
        var_recoil_current *= 0.95;
    }
    
if xscale == 1 {ang = 135+var_adjustedAngle}
if xscale == -1 {ang = 45+var_adjustedAngle-180}
//barrelx = x+lengthdir_x(7,ang)+zazaX + lengthdir_x(global.item_gun_length[gun_current],gun_angle)
//barrely = y+4+lengthdir_y(7,ang)+zazaY + lengthdir_y(global.item_gun_length[gun_current],gun_angle)
        
if rotating == 1 {animation_angle += rotate_intensity*-xscale;} else {animation_angle = 0}
if rotating == 0 {gun_angle = point_direction(x,y,obj_camera.mouseX,obj_camera.mouseY)}
    else {gun_angle = animation_angle}
   
if stat_stamina &lt; stat_maxstamina
{
    stat_stamina++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="projectile_slow">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if state_stunned == 0 and other.team != team
{
    state_stunned = 1
    state_hit = 1
    alarm[6] = 4;
    alarm[7] = 11;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if global.ammo_amount[global.item_gun_ammo_type[gun_current]] &gt; 0 and global.item_gun_melee[gun_current] == 0
{
    //var barrelx,barrely,error;
    if xscale == 1 {ang = 135+var_adjustedAngle}
    if xscale == -1 {ang = 45+var_adjustedAngle-180}
    barrelx = x+lengthdir_x(7,ang) + lengthdir_x(global.item_gun_length[gun_current],gun_angle)
    barrely = y+4+lengthdir_y(7,ang) + lengthdir_y(global.item_gun_length[gun_current],gun_angle)
    error = min(global.item_gun_inac_max[gun_current],global.item_gun_inac_base[gun_current] 
         + (global.item_gun_inac_move[gun_current]*sign(hspeed))) + var_recoil_current*2;
         
    repeat(global.item_gun_iterations[gun_current])
    {
        newBullet = instance_create(barrelx,barrely,global.item_gun_projectile[gun_current])
        muzzleFlash = instance_create(barrelx,barrely,global.item_gun_muzzleflash[gun_current])
        newBullet.direction = gun_angle
        newBullet.direction += random(error) * choose(1,-1);
        newBullet.speed = global.item_gun_projectileSpeed[gun_current]
        newBullet.hspeed += hspeed_current;
        newBullet.damage = global.item_gun_projectileDamage[gun_current]
        newBullet.image_angle = newBullet.direction;
        newBullet.hitscan = global.item_gun_hitscan[gun_current]
        newBullet.team = team; 
        newBullet.alarm[0] = global.item_viewrange[gun_current] * 128 / global.item_gun_projectileSpeed[gun_current];
        muzzleFlash.hspeed = hspeed_current
        muzzleFlash.vspeed = vspeed
    }
    
    if bursts_remaining &gt; 0 
        {
            alarm[8] = 4;
            bursts_remaining--;
        }
    alarm[0] = global.item_gun_cycle_delay[gun_current]
    global.ammo_amount[global.item_gun_ammo_type[gun_current]] -= 1;
    audio_play_sound(global.item_sound1[gun_current],0,0)
    scr_camera_shake(global.item_magnitude[gun_current],2)
    state_can_shoot = 0
    var_recoil_current += global.item_gun_inac_recoil[gun_current];
}

if global.item_gun_melee[gun_current] == 1 and stat_stamina &gt; global.item_gun_projectileDamage[gun_current]
{
    stat_stamina -= global.item_gun_projectileDamage[gun_current];
    weapon_image_index = 1;
    state_can_shoot = 0;
    alarm[1] = stat_meleeBuildupTime;
    var_meleeBendDerivative = -1.5;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_sprite_ext(sprite_index,image_index,x,y,xscale,yscale,animation_angle,image_blend,1)
//draw_sprite_ext(global.item_sprite[0,gun_current],0,x-(sign(xscale)*5),y+super_yoffset,1,armflip,gun_angle,image_blend,1)

//Body and Weapon Sprites
/*
animation_angle1_adjust[2] = 135+var_adjustedAngle
animation_angle2_adjust[2] = 135+var_adjustedAngle-var_meleeSwingBend
animation_angle3_adjust[2] = var_adjustedAngle-var_meleeSwingBend

animation_angle1_adjust[0] = 45+var_adjustedAngle-180
animation_angle2_adjust[0] = 45+var_adjustedAngle-180+var_meleeSwingBend
animation_angle3_adjust[0] = var_adjustedAngle-180+var_meleeSwingBend
*/


if state_hit = 1 {d3d_set_fog(1,c_yellow,0,0)}
draw_sprite_ext(sprite_index,image_index,x,floor(y),xscale,1,animation_angle,image_blend,1) //Lower

//if animation_singleBody = 0 //Upper
    {
        draw_sprite_ext(animation_upper_current,0,x,floor(y)+5+super_yoffset[image_index+1],xscale,1,animation_angle3_adjust[xscale+1],image_blend,1)
        draw_sprite_ext(global.item_sprite[gun_current],weapon_image_index,x+lengthdir_x(7,animation_angle1_adjust[xscale+1]),floor(y)+5+super_yoffset[image_index+1]+(lengthdir_y(7,animation_angle2_adjust[xscale+1])),1,xscale,gun_angle,image_blend,1)
    }
if animation_singleBody = 1 and animation_lower_current = animation_wallslide
    {
    if xscale == 1 {
        draw_sprite_ext(global.item_sprite[gun_current],weapon_image_index,x+lengthdir_x(7,135),floor(y)+4+lengthdir_y(7,135),1,-xscale,gun_angle,image_blend,1)}
    if xscale == -1 {
        draw_sprite_ext(global.item_sprite[gun_current],weapon_image_index,x+lengthdir_x(7,135),floor(y)+5+lengthdir_y(7,135),1,-xscale,gun_angle,image_blend,1)}
    }
d3d_set_fog(0,c_yellow,0,0);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
